options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: fm
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Fc
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '1'
    step: '1'
    stop: samp_rate/2
    value: 100e3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 12.0]
    rotation: 0
    state: true
- name: audio_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 44.1e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: enabled
- name: interp
  id: variable
  parameters:
    comment: ''
    value: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 12.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: audio_samp_rate*interp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 12.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: -Fc
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 636.0]
    rotation: 0
    state: true
- name: analog_wfm_rcv_0
  id: analog_wfm_rcv
  parameters:
    affinity: ''
    alias: ''
    audio_decimation: interp
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 588.0]
    rotation: 0
    state: disabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 592.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: audio_samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 268.0]
    rotation: 0
    state: true
- name: blocks_wavfile_sink_0
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    bits_per_sample: '8'
    comment: ''
    file: /home/parallels/Desktop/gnuradio_custom/fm/demod_audio
    nchan: '1'
    samp_rate: int(audio_samp_rate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1392, 772.0]
    rotation: 0
    state: enabled
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /home/parallels/Desktop/gnuradio_custom/fm/guitar.wav
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 260.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, fc = 100e3,\
      \ fm_dev=25e3, fs = 200e3):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Custom FM Modulator',   # will show up\
      \ in GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.fm_dev\
      \ = fm_dev\n        self.fc = fc\n        self.fs = fs\n        self.phase =\
      \ 0\n\n    def work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        \n        sig_len = len(input_items[0])\n\
      \        \n        df = input_items[0] * self.fm_dev\n        f = df + self.fc\n\
      \        \n        for i in range(0, sig_len):\n            self.phase = self.phase\
      \ + 2*np.pi*f[i]/self.fs\n            output_items[0][i] = np.cos(self.phase)\n\
      \        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fc: Fc
    fm_dev: 25e3
    fs: samp_rate
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Custom FM Modulator', 'blk', [('fc', '100000.0'), ('fm_dev', '25000.0'),
      ('fs', '200000.0')], [('0', 'float', 1)], [('0', 'float', 1)], 'Embedded Python
      Block example - a simple multiply const', ['fc', 'fm_dev', 'fs'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 252.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    Fs: samp_rate
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import math\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ fm_dev=25e3, Fs = 200e3):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Custom FM Demodulator',   # will show\
      \ up in GRC\n            in_sig=[np.complex64],\n            out_sig=[np.float32]\n\
      \        )\n        self.fm_dev = fm_dev\n        self.Fs = Fs\n        self.last_angle\
      \ = 0\n\n    def work(self, input_items, output_items):    \n        for i in\
      \ range(0, len(input_items[0])):\n            angle = np.angle(input_items[0][i])\n\
      \            angle_change = angle - self.last_angle\n            if angle_change\
      \ > math.pi:\n                angle_change -= 2 * math.pi\n            elif\
      \ angle_change < -math.pi:\n                angle_change += 2 * math.pi\n  \
      \          self.last_angle = angle\n            output_items[0][i] = angle_change\
      \ * self.Fs / (2 * math.pi * self.fm_dev)\n        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fm_dev: 25e3
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Custom FM Demodulator', 'blk', [('fm_dev', '25000.0'), ('Fs', '200000.0')],
      [('0', 'complex', 1)], [('0', 'float', 1)], 'Embedded Python Block example -
      a simple multiply const', ['Fs', 'fm_dev'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 892.0]
    rotation: 0
    state: enabled
- name: hilbert_fc_0
  id: hilbert_fc
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '300'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 428.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: float
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 236.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 412.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: audio_samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: float
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 884.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    fbw: ''
    interp: interp
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 244.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: interp
    fbw: ''
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 868.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [blocks_multiply_xx_0, '0', analog_wfm_rcv_0, '0']
- [blocks_multiply_xx_0, '0', epy_block_0_0, '0']
- [blocks_throttle_0, '0', rational_resampler_xxx_0_0, '0']
- [blocks_wavfile_source_0, '0', blocks_throttle_0, '0']
- [epy_block_0, '0', hilbert_fc_0, '0']
- [epy_block_0, '0', qtgui_sink_x_0, '0']
- [epy_block_0_0, '0', rational_resampler_xxx_0_0_0, '0']
- [hilbert_fc_0, '0', blocks_multiply_xx_0, '0']
- [hilbert_fc_0, '0', qtgui_sink_x_0_0, '0']
- [rational_resampler_xxx_0_0, '0', epy_block_0, '0']
- [rational_resampler_xxx_0_0_0, '0', blocks_wavfile_sink_0, '0']
- [rational_resampler_xxx_0_0_0, '0', qtgui_sink_x_0_0_0, '0']

metadata:
  file_format: 1
